package bgpls

import (
	"testing"
)

func TestBGPLSTLV(t *testing.T) {
	tests := []struct {
		name  string
		input []byte
		fail  bool
	}{
		{
			name:  "ls node update",
			input: []byte{0x01, 0x07, 0x00, 0x02, 0x00, 0x02, 0x01, 0x0A, 0x00, 0x0A, 0x29, 0xFF, 0x2A, 0xFF, 0x2B, 0x0A, 0x2C, 0x0A, 0x2D, 0xFF, 0x04, 0x02, 0x00, 0x05, 0x78, 0x72, 0x64, 0x30, 0x32, 0x04, 0x03, 0x00, 0x03, 0x49, 0x09, 0x01, 0x04, 0x0B, 0x00, 0x05, 0x00, 0x01, 0x80, 0x81, 0x82, 0x04, 0x0E, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0F, 0x00, 0x0C, 0x80, 0x01, 0x00, 0x80, 0x04, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x04, 0x0F, 0x00, 0x0C, 0x81, 0x01, 0x00, 0x80, 0x04, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x0F, 0x00, 0x0C, 0x82, 0x01, 0x00, 0x80, 0x04, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08},
			fail:  false,
		},
		{
			name:  "ls link update",
			input: []byte{0x01, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x04, 0x41, 0x00, 0x04, 0x4C, 0xEE, 0x6B, 0x28, 0x04, 0x47, 0x00, 0x03, 0x00, 0x00, 0x0A, 0x04, 0x52, 0x00, 0x1E, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x05, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xE4, 0x00, 0x04, 0x20, 0x10, 0x10, 0x00},
			fail:  false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tlvs, err := UnmarshalBGPLSNLRI(tt.input)
			if err != nil && !tt.fail {
				t.Fatalf("test should succeed but failed with error: %+v", err)
			}
			if err == nil && tt.fail {
				t.Fatalf("test should fail but succeeded")
			}
			if err != nil {
				return
			}
			t.Logf("tlvs: %+v", tlvs)
		})
	}
}

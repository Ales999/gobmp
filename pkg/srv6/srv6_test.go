package srv6

import (
	"reflect"
	"testing"
)

func TestUnmarshalSRv6SIDNLRI(t *testing.T) {
	srv6nlri := SIDNLRI{}
	tests := []struct {
		name   string
		input  []byte
		expect *SIDNLRI
	}{
		{
			name:   "base test to decode SRv6SID NLRI",
			input:  []byte{0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x13, 0xce, 0x02, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x01, 0x07, 0x00, 0x02, 0x00, 0x02, 0x02, 0x06, 0x00, 0x10, 0x01, 0x92, 0x01, 0x68, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			expect: &srv6nlri,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := UnmarshalSRv6SIDNLRI(tt.input)
			if err != nil {
				t.Fatalf("failed to unmarshal srv6 sid nlri with error: %+v", err)
			}
			tt.expect.String()
			if !reflect.DeepEqual(got, tt.expect) {
				t.Errorf("failed as expected  %+v do not match to actual struct %+v", tt.expect, got)
			}
		})
	}
}

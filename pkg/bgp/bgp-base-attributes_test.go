package bgp

import (
	"reflect"
	"testing"
)

func TestUnmarshaBaseAttributes(t *testing.T) {
	tests := []struct {
		name   string
		input  []byte
		expect *BaseAttributes
	}{
		{
			name:   "case 1",
			input:  []byte{0x90, 0x0e, 0x00, 0x4e, 0x40, 0x04, 0x47, 0x04, 0xc0, 0xa8, 0x09, 0x5d, 0x00, 0x00, 0x06, 0x00, 0x41, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x13, 0xce, 0x02, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x01, 0x07, 0x00, 0x02, 0x00, 0x02, 0x02, 0x06, 0x00, 0x10, 0x01, 0x92, 0x01, 0x68, 0x00, 0x93, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x01, 0x00, 0x40, 0x02, 0x00, 0x40, 0x05, 0x04, 0x00, 0x00, 0x00, 0x64, 0x80, 0x1d, 0x10, 0x04, 0xe2, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x04, 0xe4, 0x00, 0x04, 0x28, 0x18, 0x10, 0x00},
			expect: &BaseAttributes{},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := UnmarshalBGPBaseAttributes(tt.input)
			if err != nil {
				t.Fatalf("expected to succeed but failed with error: %+v", err)
			}
			if err == nil {
				if !reflect.DeepEqual(got, tt.expect) {
					t.Errorf("Expected extCommunity %+v does not match to actual extCommunity %+v", tt.expect, got)
				}
			}
		})
	}
}

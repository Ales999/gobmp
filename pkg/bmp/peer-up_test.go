package bmp

import (
	"reflect"
	"testing"
)

func TestPeerUpMsg(t *testing.T) {
	tests := []struct {
		name   string
		input  []byte
		expect *PeerUpMessage
	}{
		{
			name:   "panic 1",
			input:  []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x5B, 0x01, 0x04, 0xC3, 0xCB, 0x00, 0x00, 0x01, 0x01, 0x0A, 0x01, 0x3E, 0x02, 0x06, 0x01, 0x04, 0x00, 0x01, 0x00, 0x01, 0x02, 0x06, 0x01, 0x04, 0x00, 0x01, 0x00, 0x04, 0x02, 0x06, 0x01, 0x04, 0x00, 0x01, 0x00, 0x80, 0x02, 0x02, 0x80, 0x00, 0x02, 0x02, 0x02, 0x00, 0x02, 0x06, 0x41, 0x04, 0x00, 0x00, 0xC3, 0xCB, 0x02, 0x14, 0x05, 0x12, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x80, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x5B, 0x01, 0x04, 0xC3, 0xCB, 0x00, 0x00, 0x01, 0x01, 0x0A, 0x01, 0x3E, 0x02, 0x06, 0x01, 0x04, 0x00, 0x01, 0x00, 0x01, 0x02, 0x06, 0x01, 0x04, 0x00, 0x01, 0x00, 0x04, 0x02, 0x06, 0x01, 0x04, 0x00, 0x01, 0x00, 0x80, 0x02, 0x02, 0x80, 0x00, 0x02, 0x02, 0x02, 0x00, 0x02, 0x06, 0x41, 0x04, 0x00, 0x00, 0xC3, 0xCB, 0x02, 0x14, 0x05, 0x12, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x80, 0x00, 0x02, 0x00, 0x03, 0x00, 0x06, 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C},
			expect: &PeerUpMessage{},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			peerUp, err := UnmarshalPeerUpMessage(tt.input)
			if err != nil {
				t.Fatalf("failed but supposed to succeed with error: %+v", err)
			}
			if !reflect.DeepEqual(tt.expect, peerUp) {
				t.Fatalf("expected %+v does not match unmarshaled %+v", tt.expect, peerUp)
			}
		})
	}
}
